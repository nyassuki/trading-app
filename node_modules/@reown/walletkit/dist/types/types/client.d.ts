/// <reference types="node" />
import EventEmmiter, { EventEmitter } from "events";
import { ICore, CoreTypes, SignClientTypes } from "@walletconnect/types";
import { IWalletKitEngine } from "./engine";
import { Logger } from "@walletconnect/logger";
import { JsonRpcPayload } from "@walletconnect/jsonrpc-utils";
export declare namespace WalletKitTypes {
    type Event = "session_proposal" | "session_request" | "session_delete" | "proposal_expire" | "session_request_expire" | "session_authenticate";
    interface BaseEventArgs<T = unknown> {
        id: number;
        topic: string;
        params: T;
    }
    type SessionRequest = SignClientTypes.EventArguments["session_request"];
    type SessionProposal = SignClientTypes.EventArguments["session_proposal"];
    type SessionDelete = Omit<BaseEventArgs, "params">;
    type ProposalExpire = {
        id: number;
    };
    type SessionRequestExpire = {
        id: number;
    };
    type SessionAuthenticate = SignClientTypes.EventArguments["session_authenticate"];
    type SignConfig = SignClientTypes.Options["signConfig"];
    interface EventArguments {
        session_proposal: SessionProposal;
        session_request: SessionRequest;
        session_delete: Omit<BaseEventArgs, "params">;
        proposal_expire: ProposalExpire;
        session_request_expire: SessionRequestExpire;
        session_authenticate: SessionAuthenticate;
    }
    interface Options {
        core: ICore;
        metadata: Metadata;
        name?: string;
        signConfig?: SignConfig;
    }
    type Metadata = CoreTypes.Metadata;
    interface INotifications {
        decryptMessage: (params: {
            topic: string;
            encryptedMessage: string;
            storageOptions?: CoreTypes.Options["storageOptions"];
            storage?: CoreTypes.Options["storage"];
        }) => Promise<JsonRpcPayload>;
        getMetadata: (params: {
            topic: string;
            storageOptions?: CoreTypes.Options["storageOptions"];
            storage?: CoreTypes.Options["storage"];
        }) => Promise<CoreTypes.Metadata>;
    }
}
export declare abstract class IWalletKitEvents extends EventEmmiter {
    constructor();
    abstract emit: <E extends WalletKitTypes.Event>(event: E, args: WalletKitTypes.EventArguments[E]) => boolean;
    abstract on: <E extends WalletKitTypes.Event>(event: E, listener: (args: WalletKitTypes.EventArguments[E]) => any) => this;
    abstract once: <E extends WalletKitTypes.Event>(event: E, listener: (args: WalletKitTypes.EventArguments[E]) => any) => this;
    abstract off: <E extends WalletKitTypes.Event>(event: E, listener: (args: WalletKitTypes.EventArguments[E]) => any) => this;
    abstract removeListener: <E extends WalletKitTypes.Event>(event: E, listener: (args: WalletKitTypes.EventArguments[E]) => any) => this;
}
export declare abstract class IWalletKit {
    opts: WalletKitTypes.Options;
    abstract readonly name: string;
    abstract engine: IWalletKitEngine;
    abstract events: EventEmitter;
    abstract logger: Logger;
    abstract core: ICore;
    abstract metadata: WalletKitTypes.Metadata;
    abstract signConfig?: WalletKitTypes.SignConfig;
    constructor(opts: WalletKitTypes.Options);
    abstract pair: IWalletKitEngine["pair"];
    abstract approveSession: IWalletKitEngine["approveSession"];
    abstract rejectSession: IWalletKitEngine["rejectSession"];
    abstract updateSession: IWalletKitEngine["updateSession"];
    abstract extendSession: IWalletKitEngine["extendSession"];
    abstract respondSessionRequest: IWalletKitEngine["respondSessionRequest"];
    abstract disconnectSession: IWalletKitEngine["disconnectSession"];
    abstract emitSessionEvent: IWalletKitEngine["emitSessionEvent"];
    abstract getActiveSessions: IWalletKitEngine["getActiveSessions"];
    abstract getPendingSessionProposals: IWalletKitEngine["getPendingSessionProposals"];
    abstract getPendingSessionRequests: IWalletKitEngine["getPendingSessionRequests"];
    abstract registerDeviceToken: IWalletKitEngine["registerDeviceToken"];
    abstract approveSessionAuthenticate: IWalletKitEngine["approveSessionAuthenticate"];
    abstract formatAuthMessage: IWalletKitEngine["formatAuthMessage"];
    abstract rejectSessionAuthenticate: IWalletKitEngine["rejectSessionAuthenticate"];
    abstract on: <E extends WalletKitTypes.Event>(event: E, listener: (args: WalletKitTypes.EventArguments[E]) => void) => EventEmitter;
    abstract once: <E extends WalletKitTypes.Event>(event: E, listener: (args: WalletKitTypes.EventArguments[E]) => void) => EventEmitter;
    abstract off: <E extends WalletKitTypes.Event>(event: E, listener: (args: WalletKitTypes.EventArguments[E]) => void) => EventEmitter;
    abstract removeListener: <E extends WalletKitTypes.Event>(event: E, listener: (args: WalletKitTypes.EventArguments[E]) => void) => EventEmitter;
}
//# sourceMappingURL=client.d.ts.map