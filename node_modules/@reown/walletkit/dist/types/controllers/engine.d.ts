import { ISignClient } from "@walletconnect/types";
import { IWalletKitEngine } from "../types";
export declare class Engine extends IWalletKitEngine {
    signClient: ISignClient;
    constructor(client: IWalletKitEngine["client"]);
    init: () => Promise<void>;
    pair: IWalletKitEngine["pair"];
    approveSession: IWalletKitEngine["approveSession"];
    rejectSession: IWalletKitEngine["rejectSession"];
    updateSession: IWalletKitEngine["updateSession"];
    extendSession: IWalletKitEngine["extendSession"];
    respondSessionRequest: IWalletKitEngine["respondSessionRequest"];
    disconnectSession: IWalletKitEngine["disconnectSession"];
    emitSessionEvent: IWalletKitEngine["emitSessionEvent"];
    getActiveSessions: IWalletKitEngine["getActiveSessions"];
    getPendingSessionProposals: IWalletKitEngine["getPendingSessionProposals"];
    getPendingSessionRequests: IWalletKitEngine["getPendingSessionRequests"];
    approveSessionAuthenticate: IWalletKitEngine["approveSessionAuthenticate"];
    rejectSessionAuthenticate: IWalletKitEngine["rejectSessionAuthenticate"];
    formatAuthMessage: IWalletKitEngine["formatAuthMessage"];
    registerDeviceToken: IWalletKitEngine["registerDeviceToken"];
    on: IWalletKitEngine["on"];
    once: IWalletKitEngine["once"];
    off: IWalletKitEngine["off"];
    removeListener: IWalletKitEngine["removeListener"];
    private onSessionRequest;
    private onSessionProposal;
    private onSessionDelete;
    private onProposalExpire;
    private onSessionRequestExpire;
    private onSessionRequestAuthenticate;
    private setEvent;
}
//# sourceMappingURL=engine.d.ts.map